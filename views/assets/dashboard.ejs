  $("#menu-1").addClass("side-menu--active");
  $("#menu-1 + ul").addClass("side-menu__sub-open");

  const popups = `<%= popups %>`;
  const balanceHistories = JSON.parse(`<%- JSON.stringify(details.balanceHistories) %>`);
  let balances = JSON.parse(`<%- JSON.stringify(balances) %>`);

  $("#agentMoneySum").html(convertNumber(balances.agentBalance, "en"));
  $("#ownUserMoneySum").html(convertNumber(balances.ownUserBalances, "en"));
  $("#hubAgentMoneySum").html(convertNumber(balances.hubAgentBalances, "en"));
  $("#hubUserMoneySum").html(convertNumber(balances.hubUserBalances, "en"));

  // 기정 채트 옵션.
  const chartOption = {
    type: "line",
    options: {
      legend: {
        display: false,
      },
      scales: {
        xAxes: [{
          ticks: {
            fontSize: "10",
            fontColor: cash("html").hasClass("dark") ? "#718096" : "#777777",
          },
          gridLines: {
            display: false,
          },
        }, ],
        yAxes: [{
          ticks: {
            display: false,
          },
          gridLines: {
            color: cash("html").hasClass("dark") ? "#718096" : "#D8D8D8",
            zeroLineColor: cash("html").hasClass("dark") ? "#718096" : "#D8D8D8",
            borderDash: [2, 4],
            drawBorder: false,
          },
        }, ],
      },
    },
  };

  // 정적 그래프 데이터 옵션.
  const getDataOption = (obj) => {
    return {
      data: {
        labels: obj.date,
        datasets: [{
          label: "<%= __('dashboard.chart.money.info') %>",
          data: obj.data,
          borderWidth: 2,
          borderColor: "#3160D8",
          backgroundColor: "transparent",
          pointBorderColor: "#c9c4c4",
        }, ],
      },
    };
  };

  function drawStaticHistoryGraph(ctx, obj) {
    new Chart(ctx, {
      ...chartOption,
      ...getDataOption(obj)
    });
  }

  function funcStaticDrawGraph() {
    const showLimit = 15;
    const historyData = {};
    const historyType = ["createdAt", "agentBalance", "userBalanceSum", "childAgentBalanceSum", "childUserBalanceSum"];
    let histories = {};

    for (let i = 0; i < showLimit && i < balanceHistories.length; i++) {
      const historyObj = balanceHistories[i];
      const createdAt = moment(historyObj.createdAt).format("HH");

      for (let index = 0; index < historyType.length; index++) {
        const key = historyType[index];

        if (!Object.hasOwnProperty.call(historyData, key)) {
          historyData[key] = [];
        }

        if (key != "createdAt") {
          historyData[key].push(historyObj[key]);
        }
      }

      historyData["createdAt"].push(createdAt);
    }

    histories = {
      agent: {
        data: historyData.agentBalance,
        date: historyData.createdAt,
        target: "graph-agent-money"
      },
      ownUser: {
        data: historyData.userBalanceSum,
        date: historyData.createdAt,
        target: "graph-own-user-money"
      },
      childAgent: {
        data: historyData.childAgentBalanceSum,
        date: historyData.createdAt,
        target: "graph-hub-agent-money"
      },
      childUser: {
        data: historyData.childUserBalanceSum,
        date: historyData.createdAt,
        target: "graph-hub-user-money"
      },
    };

    Object.keys(histories).map((history) => {
      const ctx = document.getElementById(histories[history].target);
      drawStaticHistoryGraph(ctx, histories[history]);
    });
  }

  // init
  funcStaticDrawGraph();